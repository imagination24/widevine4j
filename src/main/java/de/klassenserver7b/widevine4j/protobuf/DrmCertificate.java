// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wv_proto2.proto

package de.klassenserver7b.widevine4j.protobuf;

/**
 * <pre>
 * DRM certificate definition for user devices, intermediate, service, and root
 * certificates.
 * </pre>
 *
 * Protobuf type {@code DrmCertificate}
 */
public final class DrmCertificate extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:DrmCertificate)
    DrmCertificateOrBuilder {
private static final long serialVersionUID = 0L;
  // Use DrmCertificate.newBuilder() to construct.
  private DrmCertificate(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private DrmCertificate() {
    type_ = 0;
    serialNumber_ = com.google.protobuf.ByteString.EMPTY;
    publicKey_ = com.google.protobuf.ByteString.EMPTY;
    providerId_ = "";
    serviceTypes_ = java.util.Collections.emptyList();
    algorithm_ = 1;
    rotId_ = com.google.protobuf.ByteString.EMPTY;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new DrmCertificate();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return de.klassenserver7b.widevine4j.protobuf.WvProto2.internal_static_DrmCertificate_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return de.klassenserver7b.widevine4j.protobuf.WvProto2.internal_static_DrmCertificate_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            de.klassenserver7b.widevine4j.protobuf.DrmCertificate.class, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Builder.class);
  }

  /**
   * Protobuf enum {@code DrmCertificate.Type}
   */
  public enum Type
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * ProtoBestPractices: ignore.
     * </pre>
     *
     * <code>ROOT = 0;</code>
     */
    ROOT(0),
    /**
     * <code>DEVICE_MODEL = 1;</code>
     */
    DEVICE_MODEL(1),
    /**
     * <code>DEVICE = 2;</code>
     */
    DEVICE(2),
    /**
     * <code>SERVICE = 3;</code>
     */
    SERVICE(3),
    /**
     * <code>PROVISIONER = 4;</code>
     */
    PROVISIONER(4),
    ;

    /**
     * <pre>
     * ProtoBestPractices: ignore.
     * </pre>
     *
     * <code>ROOT = 0;</code>
     */
    public static final int ROOT_VALUE = 0;
    /**
     * <code>DEVICE_MODEL = 1;</code>
     */
    public static final int DEVICE_MODEL_VALUE = 1;
    /**
     * <code>DEVICE = 2;</code>
     */
    public static final int DEVICE_VALUE = 2;
    /**
     * <code>SERVICE = 3;</code>
     */
    public static final int SERVICE_VALUE = 3;
    /**
     * <code>PROVISIONER = 4;</code>
     */
    public static final int PROVISIONER_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Type valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Type forNumber(int value) {
      switch (value) {
        case 0: return ROOT;
        case 1: return DEVICE_MODEL;
        case 2: return DEVICE;
        case 3: return SERVICE;
        case 4: return PROVISIONER;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Type> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Type>() {
            public Type findValueByNumber(int number) {
              return Type.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return de.klassenserver7b.widevine4j.protobuf.DrmCertificate.getDescriptor().getEnumTypes().get(0);
    }

    private static final Type[] VALUES = values();

    public static Type valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Type(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DrmCertificate.Type)
  }

  /**
   * Protobuf enum {@code DrmCertificate.ServiceType}
   */
  public enum ServiceType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_SERVICE_TYPE = 0;</code>
     */
    UNKNOWN_SERVICE_TYPE(0),
    /**
     * <code>LICENSE_SERVER_SDK = 1;</code>
     */
    LICENSE_SERVER_SDK(1),
    /**
     * <code>LICENSE_SERVER_PROXY_SDK = 2;</code>
     */
    LICENSE_SERVER_PROXY_SDK(2),
    /**
     * <code>PROVISIONING_SDK = 3;</code>
     */
    PROVISIONING_SDK(3),
    /**
     * <code>CAS_PROXY_SDK = 4;</code>
     */
    CAS_PROXY_SDK(4),
    ;

    /**
     * <code>UNKNOWN_SERVICE_TYPE = 0;</code>
     */
    public static final int UNKNOWN_SERVICE_TYPE_VALUE = 0;
    /**
     * <code>LICENSE_SERVER_SDK = 1;</code>
     */
    public static final int LICENSE_SERVER_SDK_VALUE = 1;
    /**
     * <code>LICENSE_SERVER_PROXY_SDK = 2;</code>
     */
    public static final int LICENSE_SERVER_PROXY_SDK_VALUE = 2;
    /**
     * <code>PROVISIONING_SDK = 3;</code>
     */
    public static final int PROVISIONING_SDK_VALUE = 3;
    /**
     * <code>CAS_PROXY_SDK = 4;</code>
     */
    public static final int CAS_PROXY_SDK_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ServiceType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ServiceType forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_SERVICE_TYPE;
        case 1: return LICENSE_SERVER_SDK;
        case 2: return LICENSE_SERVER_PROXY_SDK;
        case 3: return PROVISIONING_SDK;
        case 4: return CAS_PROXY_SDK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ServiceType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ServiceType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ServiceType>() {
            public ServiceType findValueByNumber(int number) {
              return ServiceType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return de.klassenserver7b.widevine4j.protobuf.DrmCertificate.getDescriptor().getEnumTypes().get(1);
    }

    private static final ServiceType[] VALUES = values();

    public static ServiceType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ServiceType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DrmCertificate.ServiceType)
  }

  /**
   * Protobuf enum {@code DrmCertificate.Algorithm}
   */
  public enum Algorithm
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>UNKNOWN_ALGORITHM = 0;</code>
     */
    UNKNOWN_ALGORITHM(0),
    /**
     * <code>RSA = 1;</code>
     */
    RSA(1),
    /**
     * <code>ECC_SECP256R1 = 2;</code>
     */
    ECC_SECP256R1(2),
    /**
     * <code>ECC_SECP384R1 = 3;</code>
     */
    ECC_SECP384R1(3),
    /**
     * <code>ECC_SECP521R1 = 4;</code>
     */
    ECC_SECP521R1(4),
    ;

    /**
     * <code>UNKNOWN_ALGORITHM = 0;</code>
     */
    public static final int UNKNOWN_ALGORITHM_VALUE = 0;
    /**
     * <code>RSA = 1;</code>
     */
    public static final int RSA_VALUE = 1;
    /**
     * <code>ECC_SECP256R1 = 2;</code>
     */
    public static final int ECC_SECP256R1_VALUE = 2;
    /**
     * <code>ECC_SECP384R1 = 3;</code>
     */
    public static final int ECC_SECP384R1_VALUE = 3;
    /**
     * <code>ECC_SECP521R1 = 4;</code>
     */
    public static final int ECC_SECP521R1_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Algorithm valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Algorithm forNumber(int value) {
      switch (value) {
        case 0: return UNKNOWN_ALGORITHM;
        case 1: return RSA;
        case 2: return ECC_SECP256R1;
        case 3: return ECC_SECP384R1;
        case 4: return ECC_SECP521R1;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Algorithm>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Algorithm> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Algorithm>() {
            public Algorithm findValueByNumber(int number) {
              return Algorithm.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return de.klassenserver7b.widevine4j.protobuf.DrmCertificate.getDescriptor().getEnumTypes().get(2);
    }

    private static final Algorithm[] VALUES = values();

    public static Algorithm valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Algorithm(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:DrmCertificate.Algorithm)
  }

  public interface EncryptionKeyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:DrmCertificate.EncryptionKey)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
     * </pre>
     *
     * <code>optional bytes public_key = 1;</code>
     * @return Whether the publicKey field is set.
     */
    boolean hasPublicKey();
    /**
     * <pre>
     * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
     * </pre>
     *
     * <code>optional bytes public_key = 1;</code>
     * @return The publicKey.
     */
    com.google.protobuf.ByteString getPublicKey();

    /**
     * <pre>
     * Required. The algorithm field contains the curve used to create the
     * |public_key| if algorithm is one of the ECC types.
     * The |algorithm| is used for both to determine the if the certificate is
     * ECC or RSA. The |algorithm| also specifies the parameters that were used
     * to create |public_key| and are used to create an ephemeral session key.
     * </pre>
     *
     * <code>optional .DrmCertificate.Algorithm algorithm = 2 [default = RSA];</code>
     * @return Whether the algorithm field is set.
     */
    boolean hasAlgorithm();
    /**
     * <pre>
     * Required. The algorithm field contains the curve used to create the
     * |public_key| if algorithm is one of the ECC types.
     * The |algorithm| is used for both to determine the if the certificate is
     * ECC or RSA. The |algorithm| also specifies the parameters that were used
     * to create |public_key| and are used to create an ephemeral session key.
     * </pre>
     *
     * <code>optional .DrmCertificate.Algorithm algorithm = 2 [default = RSA];</code>
     * @return The algorithm.
     */
    de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm getAlgorithm();
  }
  /**
   * Protobuf type {@code DrmCertificate.EncryptionKey}
   */
  public static final class EncryptionKey extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:DrmCertificate.EncryptionKey)
      EncryptionKeyOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use EncryptionKey.newBuilder() to construct.
    private EncryptionKey(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private EncryptionKey() {
      publicKey_ = com.google.protobuf.ByteString.EMPTY;
      algorithm_ = 1;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new EncryptionKey();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return de.klassenserver7b.widevine4j.protobuf.WvProto2.internal_static_DrmCertificate_EncryptionKey_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return de.klassenserver7b.widevine4j.protobuf.WvProto2.internal_static_DrmCertificate_EncryptionKey_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.class, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.Builder.class);
    }

    private int bitField0_;
    public static final int PUBLIC_KEY_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString publicKey_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
     * </pre>
     *
     * <code>optional bytes public_key = 1;</code>
     * @return Whether the publicKey field is set.
     */
    @java.lang.Override
    public boolean hasPublicKey() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
     * </pre>
     *
     * <code>optional bytes public_key = 1;</code>
     * @return The publicKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPublicKey() {
      return publicKey_;
    }

    public static final int ALGORITHM_FIELD_NUMBER = 2;
    private int algorithm_ = 1;
    /**
     * <pre>
     * Required. The algorithm field contains the curve used to create the
     * |public_key| if algorithm is one of the ECC types.
     * The |algorithm| is used for both to determine the if the certificate is
     * ECC or RSA. The |algorithm| also specifies the parameters that were used
     * to create |public_key| and are used to create an ephemeral session key.
     * </pre>
     *
     * <code>optional .DrmCertificate.Algorithm algorithm = 2 [default = RSA];</code>
     * @return Whether the algorithm field is set.
     */
    @java.lang.Override public boolean hasAlgorithm() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * Required. The algorithm field contains the curve used to create the
     * |public_key| if algorithm is one of the ECC types.
     * The |algorithm| is used for both to determine the if the certificate is
     * ECC or RSA. The |algorithm| also specifies the parameters that were used
     * to create |public_key| and are used to create an ephemeral session key.
     * </pre>
     *
     * <code>optional .DrmCertificate.Algorithm algorithm = 2 [default = RSA];</code>
     * @return The algorithm.
     */
    @java.lang.Override public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm getAlgorithm() {
      de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm result = de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm.forNumber(algorithm_);
      return result == null ? de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm.RSA : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBytes(1, publicKey_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeEnum(2, algorithm_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, publicKey_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, algorithm_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey)) {
        return super.equals(obj);
      }
      de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey other = (de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey) obj;

      if (hasPublicKey() != other.hasPublicKey()) return false;
      if (hasPublicKey()) {
        if (!getPublicKey()
            .equals(other.getPublicKey())) return false;
      }
      if (hasAlgorithm() != other.hasAlgorithm()) return false;
      if (hasAlgorithm()) {
        if (algorithm_ != other.algorithm_) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasPublicKey()) {
        hash = (37 * hash) + PUBLIC_KEY_FIELD_NUMBER;
        hash = (53 * hash) + getPublicKey().hashCode();
      }
      if (hasAlgorithm()) {
        hash = (37 * hash) + ALGORITHM_FIELD_NUMBER;
        hash = (53 * hash) + algorithm_;
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code DrmCertificate.EncryptionKey}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:DrmCertificate.EncryptionKey)
        de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKeyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return de.klassenserver7b.widevine4j.protobuf.WvProto2.internal_static_DrmCertificate_EncryptionKey_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return de.klassenserver7b.widevine4j.protobuf.WvProto2.internal_static_DrmCertificate_EncryptionKey_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.class, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.Builder.class);
      }

      // Construct using de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        publicKey_ = com.google.protobuf.ByteString.EMPTY;
        algorithm_ = 1;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return de.klassenserver7b.widevine4j.protobuf.WvProto2.internal_static_DrmCertificate_EncryptionKey_descriptor;
      }

      @java.lang.Override
      public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey getDefaultInstanceForType() {
        return de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.getDefaultInstance();
      }

      @java.lang.Override
      public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey build() {
        de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey buildPartial() {
        de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey result = new de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.publicKey_ = publicKey_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.algorithm_ = algorithm_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey) {
          return mergeFrom((de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey other) {
        if (other == de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.getDefaultInstance()) return this;
        if (other.hasPublicKey()) {
          setPublicKey(other.getPublicKey());
        }
        if (other.hasAlgorithm()) {
          setAlgorithm(other.getAlgorithm());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                publicKey_ = input.readBytes();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 16: {
                int tmpRaw = input.readEnum();
                de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm tmpValue =
                    de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(2, tmpRaw);
                } else {
                  algorithm_ = tmpRaw;
                  bitField0_ |= 0x00000002;
                }
                break;
              } // case 16
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString publicKey_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
       * </pre>
       *
       * <code>optional bytes public_key = 1;</code>
       * @return Whether the publicKey field is set.
       */
      @java.lang.Override
      public boolean hasPublicKey() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
       * </pre>
       *
       * <code>optional bytes public_key = 1;</code>
       * @return The publicKey.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString getPublicKey() {
        return publicKey_;
      }
      /**
       * <pre>
       * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
       * </pre>
       *
       * <code>optional bytes public_key = 1;</code>
       * @param value The publicKey to set.
       * @return This builder for chaining.
       */
      public Builder setPublicKey(com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        publicKey_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
       * </pre>
       *
       * <code>optional bytes public_key = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPublicKey() {
        bitField0_ = (bitField0_ & ~0x00000001);
        publicKey_ = getDefaultInstance().getPublicKey();
        onChanged();
        return this;
      }

      private int algorithm_ = 1;
      /**
       * <pre>
       * Required. The algorithm field contains the curve used to create the
       * |public_key| if algorithm is one of the ECC types.
       * The |algorithm| is used for both to determine the if the certificate is
       * ECC or RSA. The |algorithm| also specifies the parameters that were used
       * to create |public_key| and are used to create an ephemeral session key.
       * </pre>
       *
       * <code>optional .DrmCertificate.Algorithm algorithm = 2 [default = RSA];</code>
       * @return Whether the algorithm field is set.
       */
      @java.lang.Override public boolean hasAlgorithm() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Required. The algorithm field contains the curve used to create the
       * |public_key| if algorithm is one of the ECC types.
       * The |algorithm| is used for both to determine the if the certificate is
       * ECC or RSA. The |algorithm| also specifies the parameters that were used
       * to create |public_key| and are used to create an ephemeral session key.
       * </pre>
       *
       * <code>optional .DrmCertificate.Algorithm algorithm = 2 [default = RSA];</code>
       * @return The algorithm.
       */
      @java.lang.Override
      public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm getAlgorithm() {
        de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm result = de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm.forNumber(algorithm_);
        return result == null ? de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm.RSA : result;
      }
      /**
       * <pre>
       * Required. The algorithm field contains the curve used to create the
       * |public_key| if algorithm is one of the ECC types.
       * The |algorithm| is used for both to determine the if the certificate is
       * ECC or RSA. The |algorithm| also specifies the parameters that were used
       * to create |public_key| and are used to create an ephemeral session key.
       * </pre>
       *
       * <code>optional .DrmCertificate.Algorithm algorithm = 2 [default = RSA];</code>
       * @param value The algorithm to set.
       * @return This builder for chaining.
       */
      public Builder setAlgorithm(de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        algorithm_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Required. The algorithm field contains the curve used to create the
       * |public_key| if algorithm is one of the ECC types.
       * The |algorithm| is used for both to determine the if the certificate is
       * ECC or RSA. The |algorithm| also specifies the parameters that were used
       * to create |public_key| and are used to create an ephemeral session key.
       * </pre>
       *
       * <code>optional .DrmCertificate.Algorithm algorithm = 2 [default = RSA];</code>
       * @return This builder for chaining.
       */
      public Builder clearAlgorithm() {
        bitField0_ = (bitField0_ & ~0x00000002);
        algorithm_ = 1;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:DrmCertificate.EncryptionKey)
    }

    // @@protoc_insertion_point(class_scope:DrmCertificate.EncryptionKey)
    private static final de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey();
    }

    public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    @java.lang.Deprecated public static final com.google.protobuf.Parser<EncryptionKey>
        PARSER = new com.google.protobuf.AbstractParser<EncryptionKey>() {
      @java.lang.Override
      public EncryptionKey parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EncryptionKey> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EncryptionKey> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int TYPE_FIELD_NUMBER = 1;
  private int type_ = 0;
  /**
   * <pre>
   * Type of certificate. Required.
   * </pre>
   *
   * <code>optional .DrmCertificate.Type type = 1;</code>
   * @return Whether the type field is set.
   */
  @java.lang.Override public boolean hasType() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * Type of certificate. Required.
   * </pre>
   *
   * <code>optional .DrmCertificate.Type type = 1;</code>
   * @return The type.
   */
  @java.lang.Override public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Type getType() {
    de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Type result = de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Type.forNumber(type_);
    return result == null ? de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Type.ROOT : result;
  }

  public static final int SERIAL_NUMBER_FIELD_NUMBER = 2;
  private com.google.protobuf.ByteString serialNumber_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * 128-bit globally unique serial number of certificate.
   * Value is 0 for root certificate. Required.
   * </pre>
   *
   * <code>optional bytes serial_number = 2;</code>
   * @return Whether the serialNumber field is set.
   */
  @java.lang.Override
  public boolean hasSerialNumber() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * 128-bit globally unique serial number of certificate.
   * Value is 0 for root certificate. Required.
   * </pre>
   *
   * <code>optional bytes serial_number = 2;</code>
   * @return The serialNumber.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getSerialNumber() {
    return serialNumber_;
  }

  public static final int CREATION_TIME_SECONDS_FIELD_NUMBER = 3;
  private int creationTimeSeconds_ = 0;
  /**
   * <pre>
   * POSIX time, in seconds, when the certificate was created. Required.
   * </pre>
   *
   * <code>optional uint32 creation_time_seconds = 3;</code>
   * @return Whether the creationTimeSeconds field is set.
   */
  @java.lang.Override
  public boolean hasCreationTimeSeconds() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * POSIX time, in seconds, when the certificate was created. Required.
   * </pre>
   *
   * <code>optional uint32 creation_time_seconds = 3;</code>
   * @return The creationTimeSeconds.
   */
  @java.lang.Override
  public int getCreationTimeSeconds() {
    return creationTimeSeconds_;
  }

  public static final int EXPIRATION_TIME_SECONDS_FIELD_NUMBER = 12;
  private int expirationTimeSeconds_ = 0;
  /**
   * <pre>
   * POSIX time, in seconds, when the certificate should expire. Value of zero
   * denotes indefinite expiry time. For more information on limited lifespan
   * DRM certificates see (go/limited-lifespan-drm-certificates).
   * </pre>
   *
   * <code>optional uint32 expiration_time_seconds = 12;</code>
   * @return Whether the expirationTimeSeconds field is set.
   */
  @java.lang.Override
  public boolean hasExpirationTimeSeconds() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * POSIX time, in seconds, when the certificate should expire. Value of zero
   * denotes indefinite expiry time. For more information on limited lifespan
   * DRM certificates see (go/limited-lifespan-drm-certificates).
   * </pre>
   *
   * <code>optional uint32 expiration_time_seconds = 12;</code>
   * @return The expirationTimeSeconds.
   */
  @java.lang.Override
  public int getExpirationTimeSeconds() {
    return expirationTimeSeconds_;
  }

  public static final int PUBLIC_KEY_FIELD_NUMBER = 4;
  private com.google.protobuf.ByteString publicKey_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
   * </pre>
   *
   * <code>optional bytes public_key = 4;</code>
   * @return Whether the publicKey field is set.
   */
  @java.lang.Override
  public boolean hasPublicKey() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
   * </pre>
   *
   * <code>optional bytes public_key = 4;</code>
   * @return The publicKey.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getPublicKey() {
    return publicKey_;
  }

  public static final int SYSTEM_ID_FIELD_NUMBER = 5;
  private int systemId_ = 0;
  /**
   * <pre>
   * Widevine system ID for the device. Required for intermediate and
   * user device certificates.
   * </pre>
   *
   * <code>optional uint32 system_id = 5;</code>
   * @return Whether the systemId field is set.
   */
  @java.lang.Override
  public boolean hasSystemId() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * Widevine system ID for the device. Required for intermediate and
   * user device certificates.
   * </pre>
   *
   * <code>optional uint32 system_id = 5;</code>
   * @return The systemId.
   */
  @java.lang.Override
  public int getSystemId() {
    return systemId_;
  }

  public static final int TEST_DEVICE_DEPRECATED_FIELD_NUMBER = 6;
  private boolean testDeviceDeprecated_ = false;
  /**
   * <pre>
   * Deprecated field, which used to indicate whether the device was a test
   * (non-production) device. The test_device field in ProvisionedDeviceInfo
   * below should be observed instead.
   * </pre>
   *
   * <code>optional bool test_device_deprecated = 6 [deprecated = true];</code>
   * @deprecated DrmCertificate.test_device_deprecated is deprecated.
   *     See wv_proto2.proto;l=598
   * @return Whether the testDeviceDeprecated field is set.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean hasTestDeviceDeprecated() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * Deprecated field, which used to indicate whether the device was a test
   * (non-production) device. The test_device field in ProvisionedDeviceInfo
   * below should be observed instead.
   * </pre>
   *
   * <code>optional bool test_device_deprecated = 6 [deprecated = true];</code>
   * @deprecated DrmCertificate.test_device_deprecated is deprecated.
   *     See wv_proto2.proto;l=598
   * @return The testDeviceDeprecated.
   */
  @java.lang.Override
  @java.lang.Deprecated public boolean getTestDeviceDeprecated() {
    return testDeviceDeprecated_;
  }

  public static final int PROVIDER_ID_FIELD_NUMBER = 7;
  @SuppressWarnings("serial")
  private volatile java.lang.Object providerId_ = "";
  /**
   * <pre>
   * Service identifier (web origin) for the provider which owns the
   * certificate. Required for service and provisioner certificates.
   * </pre>
   *
   * <code>optional string provider_id = 7;</code>
   * @return Whether the providerId field is set.
   */
  @java.lang.Override
  public boolean hasProviderId() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * Service identifier (web origin) for the provider which owns the
   * certificate. Required for service and provisioner certificates.
   * </pre>
   *
   * <code>optional string provider_id = 7;</code>
   * @return The providerId.
   */
  @java.lang.Override
  public java.lang.String getProviderId() {
    java.lang.Object ref = providerId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        providerId_ = s;
      }
      return s;
    }
  }
  /**
   * <pre>
   * Service identifier (web origin) for the provider which owns the
   * certificate. Required for service and provisioner certificates.
   * </pre>
   *
   * <code>optional string provider_id = 7;</code>
   * @return The bytes for providerId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getProviderIdBytes() {
    java.lang.Object ref = providerId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      providerId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int SERVICE_TYPES_FIELD_NUMBER = 8;
  @SuppressWarnings("serial")
  private java.util.List<java.lang.Integer> serviceTypes_;
  private static final com.google.protobuf.Internal.ListAdapter.Converter<
      java.lang.Integer, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType> serviceTypes_converter_ =
          new com.google.protobuf.Internal.ListAdapter.Converter<
              java.lang.Integer, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType>() {
            public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType convert(java.lang.Integer from) {
              de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType result = de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType.forNumber(from);
              return result == null ? de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType.UNKNOWN_SERVICE_TYPE : result;
            }
          };
  /**
   * <pre>
   * This field is used only when type = SERVICE to specify which SDK uses
   * service certificate. This repeated field is treated as a set. A certificate
   * may be used for the specified service SDK if the appropriate ServiceType
   * is specified in this field.
   * </pre>
   *
   * <code>repeated .DrmCertificate.ServiceType service_types = 8;</code>
   * @return A list containing the serviceTypes.
   */
  @java.lang.Override
  public java.util.List<de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType> getServiceTypesList() {
    return new com.google.protobuf.Internal.ListAdapter<
        java.lang.Integer, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType>(serviceTypes_, serviceTypes_converter_);
  }
  /**
   * <pre>
   * This field is used only when type = SERVICE to specify which SDK uses
   * service certificate. This repeated field is treated as a set. A certificate
   * may be used for the specified service SDK if the appropriate ServiceType
   * is specified in this field.
   * </pre>
   *
   * <code>repeated .DrmCertificate.ServiceType service_types = 8;</code>
   * @return The count of serviceTypes.
   */
  @java.lang.Override
  public int getServiceTypesCount() {
    return serviceTypes_.size();
  }
  /**
   * <pre>
   * This field is used only when type = SERVICE to specify which SDK uses
   * service certificate. This repeated field is treated as a set. A certificate
   * may be used for the specified service SDK if the appropriate ServiceType
   * is specified in this field.
   * </pre>
   *
   * <code>repeated .DrmCertificate.ServiceType service_types = 8;</code>
   * @param index The index of the element to return.
   * @return The serviceTypes at the given index.
   */
  @java.lang.Override
  public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType getServiceTypes(int index) {
    return serviceTypes_converter_.convert(serviceTypes_.get(index));
  }

  public static final int ALGORITHM_FIELD_NUMBER = 9;
  private int algorithm_ = 1;
  /**
   * <pre>
   * Required. The algorithm field contains the curve used to create the
   * |public_key| if algorithm is one of the ECC types.
   * The |algorithm| is used for both to determine the if the certificate is ECC
   * or RSA. The |algorithm| also specifies the parameters that were used to
   * create |public_key| and are used to create an ephemeral session key.
   * </pre>
   *
   * <code>optional .DrmCertificate.Algorithm algorithm = 9 [default = RSA];</code>
   * @return Whether the algorithm field is set.
   */
  @java.lang.Override public boolean hasAlgorithm() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * Required. The algorithm field contains the curve used to create the
   * |public_key| if algorithm is one of the ECC types.
   * The |algorithm| is used for both to determine the if the certificate is ECC
   * or RSA. The |algorithm| also specifies the parameters that were used to
   * create |public_key| and are used to create an ephemeral session key.
   * </pre>
   *
   * <code>optional .DrmCertificate.Algorithm algorithm = 9 [default = RSA];</code>
   * @return The algorithm.
   */
  @java.lang.Override public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm getAlgorithm() {
    de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm result = de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm.forNumber(algorithm_);
    return result == null ? de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm.RSA : result;
  }

  public static final int ROT_ID_FIELD_NUMBER = 10;
  private com.google.protobuf.ByteString rotId_ = com.google.protobuf.ByteString.EMPTY;
  /**
   * <pre>
   * Optional. May be present in DEVICE certificate types. This is the root
   * of trust identifier that holds an encrypted value that identifies the
   * keybox or other root of trust that was used to provision a DEVICE drm
   * certificate.
   * </pre>
   *
   * <code>optional bytes rot_id = 10;</code>
   * @return Whether the rotId field is set.
   */
  @java.lang.Override
  public boolean hasRotId() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * Optional. May be present in DEVICE certificate types. This is the root
   * of trust identifier that holds an encrypted value that identifies the
   * keybox or other root of trust that was used to provision a DEVICE drm
   * certificate.
   * </pre>
   *
   * <code>optional bytes rot_id = 10;</code>
   * @return The rotId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getRotId() {
    return rotId_;
  }

  public static final int ENCRYPTION_KEY_FIELD_NUMBER = 11;
  private de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey encryptionKey_;
  /**
   * <pre>
   * Optional. May be present in devices that explicitly support dual keys. When
   * present the |public_key| is used for verification of received license
   * request messages.
   * </pre>
   *
   * <code>optional .DrmCertificate.EncryptionKey encryption_key = 11;</code>
   * @return Whether the encryptionKey field is set.
   */
  @java.lang.Override
  public boolean hasEncryptionKey() {
    return ((bitField0_ & 0x00000400) != 0);
  }
  /**
   * <pre>
   * Optional. May be present in devices that explicitly support dual keys. When
   * present the |public_key| is used for verification of received license
   * request messages.
   * </pre>
   *
   * <code>optional .DrmCertificate.EncryptionKey encryption_key = 11;</code>
   * @return The encryptionKey.
   */
  @java.lang.Override
  public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey getEncryptionKey() {
    return encryptionKey_ == null ? de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.getDefaultInstance() : encryptionKey_;
  }
  /**
   * <pre>
   * Optional. May be present in devices that explicitly support dual keys. When
   * present the |public_key| is used for verification of received license
   * request messages.
   * </pre>
   *
   * <code>optional .DrmCertificate.EncryptionKey encryption_key = 11;</code>
   */
  @java.lang.Override
  public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKeyOrBuilder getEncryptionKeyOrBuilder() {
    return encryptionKey_ == null ? de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.getDefaultInstance() : encryptionKey_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeEnum(1, type_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeBytes(2, serialNumber_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeUInt32(3, creationTimeSeconds_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeBytes(4, publicKey_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeUInt32(5, systemId_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      output.writeBool(6, testDeviceDeprecated_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 7, providerId_);
    }
    for (int i = 0; i < serviceTypes_.size(); i++) {
      output.writeEnum(8, serviceTypes_.get(i));
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      output.writeEnum(9, algorithm_);
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      output.writeBytes(10, rotId_);
    }
    if (((bitField0_ & 0x00000400) != 0)) {
      output.writeMessage(11, getEncryptionKey());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeUInt32(12, expirationTimeSeconds_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, type_);
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(2, serialNumber_);
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(3, creationTimeSeconds_);
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(4, publicKey_);
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(5, systemId_);
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, testDeviceDeprecated_);
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, providerId_);
    }
    {
      int dataSize = 0;
      for (int i = 0; i < serviceTypes_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeEnumSizeNoTag(serviceTypes_.get(i));
      }
      size += dataSize;
      size += 1 * serviceTypes_.size();
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(9, algorithm_);
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(10, rotId_);
    }
    if (((bitField0_ & 0x00000400) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getEncryptionKey());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeUInt32Size(12, expirationTimeSeconds_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof de.klassenserver7b.widevine4j.protobuf.DrmCertificate)) {
      return super.equals(obj);
    }
    de.klassenserver7b.widevine4j.protobuf.DrmCertificate other = (de.klassenserver7b.widevine4j.protobuf.DrmCertificate) obj;

    if (hasType() != other.hasType()) return false;
    if (hasType()) {
      if (type_ != other.type_) return false;
    }
    if (hasSerialNumber() != other.hasSerialNumber()) return false;
    if (hasSerialNumber()) {
      if (!getSerialNumber()
          .equals(other.getSerialNumber())) return false;
    }
    if (hasCreationTimeSeconds() != other.hasCreationTimeSeconds()) return false;
    if (hasCreationTimeSeconds()) {
      if (getCreationTimeSeconds()
          != other.getCreationTimeSeconds()) return false;
    }
    if (hasExpirationTimeSeconds() != other.hasExpirationTimeSeconds()) return false;
    if (hasExpirationTimeSeconds()) {
      if (getExpirationTimeSeconds()
          != other.getExpirationTimeSeconds()) return false;
    }
    if (hasPublicKey() != other.hasPublicKey()) return false;
    if (hasPublicKey()) {
      if (!getPublicKey()
          .equals(other.getPublicKey())) return false;
    }
    if (hasSystemId() != other.hasSystemId()) return false;
    if (hasSystemId()) {
      if (getSystemId()
          != other.getSystemId()) return false;
    }
    if (hasTestDeviceDeprecated() != other.hasTestDeviceDeprecated()) return false;
    if (hasTestDeviceDeprecated()) {
      if (getTestDeviceDeprecated()
          != other.getTestDeviceDeprecated()) return false;
    }
    if (hasProviderId() != other.hasProviderId()) return false;
    if (hasProviderId()) {
      if (!getProviderId()
          .equals(other.getProviderId())) return false;
    }
    if (!serviceTypes_.equals(other.serviceTypes_)) return false;
    if (hasAlgorithm() != other.hasAlgorithm()) return false;
    if (hasAlgorithm()) {
      if (algorithm_ != other.algorithm_) return false;
    }
    if (hasRotId() != other.hasRotId()) return false;
    if (hasRotId()) {
      if (!getRotId()
          .equals(other.getRotId())) return false;
    }
    if (hasEncryptionKey() != other.hasEncryptionKey()) return false;
    if (hasEncryptionKey()) {
      if (!getEncryptionKey()
          .equals(other.getEncryptionKey())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasType()) {
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
    }
    if (hasSerialNumber()) {
      hash = (37 * hash) + SERIAL_NUMBER_FIELD_NUMBER;
      hash = (53 * hash) + getSerialNumber().hashCode();
    }
    if (hasCreationTimeSeconds()) {
      hash = (37 * hash) + CREATION_TIME_SECONDS_FIELD_NUMBER;
      hash = (53 * hash) + getCreationTimeSeconds();
    }
    if (hasExpirationTimeSeconds()) {
      hash = (37 * hash) + EXPIRATION_TIME_SECONDS_FIELD_NUMBER;
      hash = (53 * hash) + getExpirationTimeSeconds();
    }
    if (hasPublicKey()) {
      hash = (37 * hash) + PUBLIC_KEY_FIELD_NUMBER;
      hash = (53 * hash) + getPublicKey().hashCode();
    }
    if (hasSystemId()) {
      hash = (37 * hash) + SYSTEM_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSystemId();
    }
    if (hasTestDeviceDeprecated()) {
      hash = (37 * hash) + TEST_DEVICE_DEPRECATED_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getTestDeviceDeprecated());
    }
    if (hasProviderId()) {
      hash = (37 * hash) + PROVIDER_ID_FIELD_NUMBER;
      hash = (53 * hash) + getProviderId().hashCode();
    }
    if (getServiceTypesCount() > 0) {
      hash = (37 * hash) + SERVICE_TYPES_FIELD_NUMBER;
      hash = (53 * hash) + serviceTypes_.hashCode();
    }
    if (hasAlgorithm()) {
      hash = (37 * hash) + ALGORITHM_FIELD_NUMBER;
      hash = (53 * hash) + algorithm_;
    }
    if (hasRotId()) {
      hash = (37 * hash) + ROT_ID_FIELD_NUMBER;
      hash = (53 * hash) + getRotId().hashCode();
    }
    if (hasEncryptionKey()) {
      hash = (37 * hash) + ENCRYPTION_KEY_FIELD_NUMBER;
      hash = (53 * hash) + getEncryptionKey().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(de.klassenserver7b.widevine4j.protobuf.DrmCertificate prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * DRM certificate definition for user devices, intermediate, service, and root
   * certificates.
   * </pre>
   *
   * Protobuf type {@code DrmCertificate}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:DrmCertificate)
      de.klassenserver7b.widevine4j.protobuf.DrmCertificateOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return de.klassenserver7b.widevine4j.protobuf.WvProto2.internal_static_DrmCertificate_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return de.klassenserver7b.widevine4j.protobuf.WvProto2.internal_static_DrmCertificate_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              de.klassenserver7b.widevine4j.protobuf.DrmCertificate.class, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Builder.class);
    }

    // Construct using de.klassenserver7b.widevine4j.protobuf.DrmCertificate.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
        getEncryptionKeyFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      type_ = 0;
      serialNumber_ = com.google.protobuf.ByteString.EMPTY;
      creationTimeSeconds_ = 0;
      expirationTimeSeconds_ = 0;
      publicKey_ = com.google.protobuf.ByteString.EMPTY;
      systemId_ = 0;
      testDeviceDeprecated_ = false;
      providerId_ = "";
      serviceTypes_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000100);
      algorithm_ = 1;
      rotId_ = com.google.protobuf.ByteString.EMPTY;
      encryptionKey_ = null;
      if (encryptionKeyBuilder_ != null) {
        encryptionKeyBuilder_.dispose();
        encryptionKeyBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return de.klassenserver7b.widevine4j.protobuf.WvProto2.internal_static_DrmCertificate_descriptor;
    }

    @java.lang.Override
    public de.klassenserver7b.widevine4j.protobuf.DrmCertificate getDefaultInstanceForType() {
      return de.klassenserver7b.widevine4j.protobuf.DrmCertificate.getDefaultInstance();
    }

    @java.lang.Override
    public de.klassenserver7b.widevine4j.protobuf.DrmCertificate build() {
      de.klassenserver7b.widevine4j.protobuf.DrmCertificate result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public de.klassenserver7b.widevine4j.protobuf.DrmCertificate buildPartial() {
      de.klassenserver7b.widevine4j.protobuf.DrmCertificate result = new de.klassenserver7b.widevine4j.protobuf.DrmCertificate(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(de.klassenserver7b.widevine4j.protobuf.DrmCertificate result) {
      if (((bitField0_ & 0x00000100) != 0)) {
        serviceTypes_ = java.util.Collections.unmodifiableList(serviceTypes_);
        bitField0_ = (bitField0_ & ~0x00000100);
      }
      result.serviceTypes_ = serviceTypes_;
    }

    private void buildPartial0(de.klassenserver7b.widevine4j.protobuf.DrmCertificate result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.type_ = type_;
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.serialNumber_ = serialNumber_;
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.creationTimeSeconds_ = creationTimeSeconds_;
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.expirationTimeSeconds_ = expirationTimeSeconds_;
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.publicKey_ = publicKey_;
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.systemId_ = systemId_;
        to_bitField0_ |= 0x00000020;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.testDeviceDeprecated_ = testDeviceDeprecated_;
        to_bitField0_ |= 0x00000040;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.providerId_ = providerId_;
        to_bitField0_ |= 0x00000080;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.algorithm_ = algorithm_;
        to_bitField0_ |= 0x00000100;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.rotId_ = rotId_;
        to_bitField0_ |= 0x00000200;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.encryptionKey_ = encryptionKeyBuilder_ == null
            ? encryptionKey_
            : encryptionKeyBuilder_.build();
        to_bitField0_ |= 0x00000400;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof de.klassenserver7b.widevine4j.protobuf.DrmCertificate) {
        return mergeFrom((de.klassenserver7b.widevine4j.protobuf.DrmCertificate)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(de.klassenserver7b.widevine4j.protobuf.DrmCertificate other) {
      if (other == de.klassenserver7b.widevine4j.protobuf.DrmCertificate.getDefaultInstance()) return this;
      if (other.hasType()) {
        setType(other.getType());
      }
      if (other.hasSerialNumber()) {
        setSerialNumber(other.getSerialNumber());
      }
      if (other.hasCreationTimeSeconds()) {
        setCreationTimeSeconds(other.getCreationTimeSeconds());
      }
      if (other.hasExpirationTimeSeconds()) {
        setExpirationTimeSeconds(other.getExpirationTimeSeconds());
      }
      if (other.hasPublicKey()) {
        setPublicKey(other.getPublicKey());
      }
      if (other.hasSystemId()) {
        setSystemId(other.getSystemId());
      }
      if (other.hasTestDeviceDeprecated()) {
        setTestDeviceDeprecated(other.getTestDeviceDeprecated());
      }
      if (other.hasProviderId()) {
        providerId_ = other.providerId_;
        bitField0_ |= 0x00000080;
        onChanged();
      }
      if (!other.serviceTypes_.isEmpty()) {
        if (serviceTypes_.isEmpty()) {
          serviceTypes_ = other.serviceTypes_;
          bitField0_ = (bitField0_ & ~0x00000100);
        } else {
          ensureServiceTypesIsMutable();
          serviceTypes_.addAll(other.serviceTypes_);
        }
        onChanged();
      }
      if (other.hasAlgorithm()) {
        setAlgorithm(other.getAlgorithm());
      }
      if (other.hasRotId()) {
        setRotId(other.getRotId());
      }
      if (other.hasEncryptionKey()) {
        mergeEncryptionKey(other.getEncryptionKey());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int tmpRaw = input.readEnum();
              de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Type tmpValue =
                  de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Type.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(1, tmpRaw);
              } else {
                type_ = tmpRaw;
                bitField0_ |= 0x00000001;
              }
              break;
            } // case 8
            case 18: {
              serialNumber_ = input.readBytes();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 24: {
              creationTimeSeconds_ = input.readUInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            case 34: {
              publicKey_ = input.readBytes();
              bitField0_ |= 0x00000010;
              break;
            } // case 34
            case 40: {
              systemId_ = input.readUInt32();
              bitField0_ |= 0x00000020;
              break;
            } // case 40
            case 48: {
              testDeviceDeprecated_ = input.readBool();
              bitField0_ |= 0x00000040;
              break;
            } // case 48
            case 58: {
              providerId_ = input.readBytes();
              bitField0_ |= 0x00000080;
              break;
            } // case 58
            case 64: {
              int tmpRaw = input.readEnum();
              de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType tmpValue =
                  de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(8, tmpRaw);
              } else {
                ensureServiceTypesIsMutable();
                serviceTypes_.add(tmpRaw);
              }
              break;
            } // case 64
            case 66: {
              int length = input.readRawVarint32();
              int oldLimit = input.pushLimit(length);
              while(input.getBytesUntilLimit() > 0) {
                int tmpRaw = input.readEnum();
                de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType tmpValue =
                    de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType.forNumber(tmpRaw);
                if (tmpValue == null) {
                  mergeUnknownVarintField(8, tmpRaw);
                } else {
                  ensureServiceTypesIsMutable();
                  serviceTypes_.add(tmpRaw);
                }
              }
              input.popLimit(oldLimit);
              break;
            } // case 66
            case 72: {
              int tmpRaw = input.readEnum();
              de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm tmpValue =
                  de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm.forNumber(tmpRaw);
              if (tmpValue == null) {
                mergeUnknownVarintField(9, tmpRaw);
              } else {
                algorithm_ = tmpRaw;
                bitField0_ |= 0x00000200;
              }
              break;
            } // case 72
            case 82: {
              rotId_ = input.readBytes();
              bitField0_ |= 0x00000400;
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getEncryptionKeyFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000800;
              break;
            } // case 90
            case 96: {
              expirationTimeSeconds_ = input.readUInt32();
              bitField0_ |= 0x00000008;
              break;
            } // case 96
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int type_ = 0;
    /**
     * <pre>
     * Type of certificate. Required.
     * </pre>
     *
     * <code>optional .DrmCertificate.Type type = 1;</code>
     * @return Whether the type field is set.
     */
    @java.lang.Override public boolean hasType() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Type of certificate. Required.
     * </pre>
     *
     * <code>optional .DrmCertificate.Type type = 1;</code>
     * @return The type.
     */
    @java.lang.Override
    public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Type getType() {
      de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Type result = de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Type.forNumber(type_);
      return result == null ? de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Type.ROOT : result;
    }
    /**
     * <pre>
     * Type of certificate. Required.
     * </pre>
     *
     * <code>optional .DrmCertificate.Type type = 1;</code>
     * @param value The type to set.
     * @return This builder for chaining.
     */
    public Builder setType(de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Type value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Type of certificate. Required.
     * </pre>
     *
     * <code>optional .DrmCertificate.Type type = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      type_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString serialNumber_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * 128-bit globally unique serial number of certificate.
     * Value is 0 for root certificate. Required.
     * </pre>
     *
     * <code>optional bytes serial_number = 2;</code>
     * @return Whether the serialNumber field is set.
     */
    @java.lang.Override
    public boolean hasSerialNumber() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * 128-bit globally unique serial number of certificate.
     * Value is 0 for root certificate. Required.
     * </pre>
     *
     * <code>optional bytes serial_number = 2;</code>
     * @return The serialNumber.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getSerialNumber() {
      return serialNumber_;
    }
    /**
     * <pre>
     * 128-bit globally unique serial number of certificate.
     * Value is 0 for root certificate. Required.
     * </pre>
     *
     * <code>optional bytes serial_number = 2;</code>
     * @param value The serialNumber to set.
     * @return This builder for chaining.
     */
    public Builder setSerialNumber(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      serialNumber_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 128-bit globally unique serial number of certificate.
     * Value is 0 for root certificate. Required.
     * </pre>
     *
     * <code>optional bytes serial_number = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearSerialNumber() {
      bitField0_ = (bitField0_ & ~0x00000002);
      serialNumber_ = getDefaultInstance().getSerialNumber();
      onChanged();
      return this;
    }

    private int creationTimeSeconds_ ;
    /**
     * <pre>
     * POSIX time, in seconds, when the certificate was created. Required.
     * </pre>
     *
     * <code>optional uint32 creation_time_seconds = 3;</code>
     * @return Whether the creationTimeSeconds field is set.
     */
    @java.lang.Override
    public boolean hasCreationTimeSeconds() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * POSIX time, in seconds, when the certificate was created. Required.
     * </pre>
     *
     * <code>optional uint32 creation_time_seconds = 3;</code>
     * @return The creationTimeSeconds.
     */
    @java.lang.Override
    public int getCreationTimeSeconds() {
      return creationTimeSeconds_;
    }
    /**
     * <pre>
     * POSIX time, in seconds, when the certificate was created. Required.
     * </pre>
     *
     * <code>optional uint32 creation_time_seconds = 3;</code>
     * @param value The creationTimeSeconds to set.
     * @return This builder for chaining.
     */
    public Builder setCreationTimeSeconds(int value) {

      creationTimeSeconds_ = value;
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * POSIX time, in seconds, when the certificate was created. Required.
     * </pre>
     *
     * <code>optional uint32 creation_time_seconds = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearCreationTimeSeconds() {
      bitField0_ = (bitField0_ & ~0x00000004);
      creationTimeSeconds_ = 0;
      onChanged();
      return this;
    }

    private int expirationTimeSeconds_ ;
    /**
     * <pre>
     * POSIX time, in seconds, when the certificate should expire. Value of zero
     * denotes indefinite expiry time. For more information on limited lifespan
     * DRM certificates see (go/limited-lifespan-drm-certificates).
     * </pre>
     *
     * <code>optional uint32 expiration_time_seconds = 12;</code>
     * @return Whether the expirationTimeSeconds field is set.
     */
    @java.lang.Override
    public boolean hasExpirationTimeSeconds() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * POSIX time, in seconds, when the certificate should expire. Value of zero
     * denotes indefinite expiry time. For more information on limited lifespan
     * DRM certificates see (go/limited-lifespan-drm-certificates).
     * </pre>
     *
     * <code>optional uint32 expiration_time_seconds = 12;</code>
     * @return The expirationTimeSeconds.
     */
    @java.lang.Override
    public int getExpirationTimeSeconds() {
      return expirationTimeSeconds_;
    }
    /**
     * <pre>
     * POSIX time, in seconds, when the certificate should expire. Value of zero
     * denotes indefinite expiry time. For more information on limited lifespan
     * DRM certificates see (go/limited-lifespan-drm-certificates).
     * </pre>
     *
     * <code>optional uint32 expiration_time_seconds = 12;</code>
     * @param value The expirationTimeSeconds to set.
     * @return This builder for chaining.
     */
    public Builder setExpirationTimeSeconds(int value) {

      expirationTimeSeconds_ = value;
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * POSIX time, in seconds, when the certificate should expire. Value of zero
     * denotes indefinite expiry time. For more information on limited lifespan
     * DRM certificates see (go/limited-lifespan-drm-certificates).
     * </pre>
     *
     * <code>optional uint32 expiration_time_seconds = 12;</code>
     * @return This builder for chaining.
     */
    public Builder clearExpirationTimeSeconds() {
      bitField0_ = (bitField0_ & ~0x00000008);
      expirationTimeSeconds_ = 0;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString publicKey_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
     * </pre>
     *
     * <code>optional bytes public_key = 4;</code>
     * @return Whether the publicKey field is set.
     */
    @java.lang.Override
    public boolean hasPublicKey() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
     * </pre>
     *
     * <code>optional bytes public_key = 4;</code>
     * @return The publicKey.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getPublicKey() {
      return publicKey_;
    }
    /**
     * <pre>
     * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
     * </pre>
     *
     * <code>optional bytes public_key = 4;</code>
     * @param value The publicKey to set.
     * @return This builder for chaining.
     */
    public Builder setPublicKey(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      publicKey_ = value;
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Device public key. PKCS#1 ASN.1 DER-encoded. Required.
     * </pre>
     *
     * <code>optional bytes public_key = 4;</code>
     * @return This builder for chaining.
     */
    public Builder clearPublicKey() {
      bitField0_ = (bitField0_ & ~0x00000010);
      publicKey_ = getDefaultInstance().getPublicKey();
      onChanged();
      return this;
    }

    private int systemId_ ;
    /**
     * <pre>
     * Widevine system ID for the device. Required for intermediate and
     * user device certificates.
     * </pre>
     *
     * <code>optional uint32 system_id = 5;</code>
     * @return Whether the systemId field is set.
     */
    @java.lang.Override
    public boolean hasSystemId() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Widevine system ID for the device. Required for intermediate and
     * user device certificates.
     * </pre>
     *
     * <code>optional uint32 system_id = 5;</code>
     * @return The systemId.
     */
    @java.lang.Override
    public int getSystemId() {
      return systemId_;
    }
    /**
     * <pre>
     * Widevine system ID for the device. Required for intermediate and
     * user device certificates.
     * </pre>
     *
     * <code>optional uint32 system_id = 5;</code>
     * @param value The systemId to set.
     * @return This builder for chaining.
     */
    public Builder setSystemId(int value) {

      systemId_ = value;
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Widevine system ID for the device. Required for intermediate and
     * user device certificates.
     * </pre>
     *
     * <code>optional uint32 system_id = 5;</code>
     * @return This builder for chaining.
     */
    public Builder clearSystemId() {
      bitField0_ = (bitField0_ & ~0x00000020);
      systemId_ = 0;
      onChanged();
      return this;
    }

    private boolean testDeviceDeprecated_ ;
    /**
     * <pre>
     * Deprecated field, which used to indicate whether the device was a test
     * (non-production) device. The test_device field in ProvisionedDeviceInfo
     * below should be observed instead.
     * </pre>
     *
     * <code>optional bool test_device_deprecated = 6 [deprecated = true];</code>
     * @deprecated DrmCertificate.test_device_deprecated is deprecated.
     *     See wv_proto2.proto;l=598
     * @return Whether the testDeviceDeprecated field is set.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean hasTestDeviceDeprecated() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * Deprecated field, which used to indicate whether the device was a test
     * (non-production) device. The test_device field in ProvisionedDeviceInfo
     * below should be observed instead.
     * </pre>
     *
     * <code>optional bool test_device_deprecated = 6 [deprecated = true];</code>
     * @deprecated DrmCertificate.test_device_deprecated is deprecated.
     *     See wv_proto2.proto;l=598
     * @return The testDeviceDeprecated.
     */
    @java.lang.Override
    @java.lang.Deprecated public boolean getTestDeviceDeprecated() {
      return testDeviceDeprecated_;
    }
    /**
     * <pre>
     * Deprecated field, which used to indicate whether the device was a test
     * (non-production) device. The test_device field in ProvisionedDeviceInfo
     * below should be observed instead.
     * </pre>
     *
     * <code>optional bool test_device_deprecated = 6 [deprecated = true];</code>
     * @deprecated DrmCertificate.test_device_deprecated is deprecated.
     *     See wv_proto2.proto;l=598
     * @param value The testDeviceDeprecated to set.
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder setTestDeviceDeprecated(boolean value) {

      testDeviceDeprecated_ = value;
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Deprecated field, which used to indicate whether the device was a test
     * (non-production) device. The test_device field in ProvisionedDeviceInfo
     * below should be observed instead.
     * </pre>
     *
     * <code>optional bool test_device_deprecated = 6 [deprecated = true];</code>
     * @deprecated DrmCertificate.test_device_deprecated is deprecated.
     *     See wv_proto2.proto;l=598
     * @return This builder for chaining.
     */
    @java.lang.Deprecated public Builder clearTestDeviceDeprecated() {
      bitField0_ = (bitField0_ & ~0x00000040);
      testDeviceDeprecated_ = false;
      onChanged();
      return this;
    }

    private java.lang.Object providerId_ = "";
    /**
     * <pre>
     * Service identifier (web origin) for the provider which owns the
     * certificate. Required for service and provisioner certificates.
     * </pre>
     *
     * <code>optional string provider_id = 7;</code>
     * @return Whether the providerId field is set.
     */
    public boolean hasProviderId() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * Service identifier (web origin) for the provider which owns the
     * certificate. Required for service and provisioner certificates.
     * </pre>
     *
     * <code>optional string provider_id = 7;</code>
     * @return The providerId.
     */
    public java.lang.String getProviderId() {
      java.lang.Object ref = providerId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          providerId_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Service identifier (web origin) for the provider which owns the
     * certificate. Required for service and provisioner certificates.
     * </pre>
     *
     * <code>optional string provider_id = 7;</code>
     * @return The bytes for providerId.
     */
    public com.google.protobuf.ByteString
        getProviderIdBytes() {
      java.lang.Object ref = providerId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        providerId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Service identifier (web origin) for the provider which owns the
     * certificate. Required for service and provisioner certificates.
     * </pre>
     *
     * <code>optional string provider_id = 7;</code>
     * @param value The providerId to set.
     * @return This builder for chaining.
     */
    public Builder setProviderId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      providerId_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Service identifier (web origin) for the provider which owns the
     * certificate. Required for service and provisioner certificates.
     * </pre>
     *
     * <code>optional string provider_id = 7;</code>
     * @return This builder for chaining.
     */
    public Builder clearProviderId() {
      providerId_ = getDefaultInstance().getProviderId();
      bitField0_ = (bitField0_ & ~0x00000080);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Service identifier (web origin) for the provider which owns the
     * certificate. Required for service and provisioner certificates.
     * </pre>
     *
     * <code>optional string provider_id = 7;</code>
     * @param value The bytes for providerId to set.
     * @return This builder for chaining.
     */
    public Builder setProviderIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      providerId_ = value;
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }

    private java.util.List<java.lang.Integer> serviceTypes_ =
      java.util.Collections.emptyList();
    private void ensureServiceTypesIsMutable() {
      if (!((bitField0_ & 0x00000100) != 0)) {
        serviceTypes_ = new java.util.ArrayList<java.lang.Integer>(serviceTypes_);
        bitField0_ |= 0x00000100;
      }
    }
    /**
     * <pre>
     * This field is used only when type = SERVICE to specify which SDK uses
     * service certificate. This repeated field is treated as a set. A certificate
     * may be used for the specified service SDK if the appropriate ServiceType
     * is specified in this field.
     * </pre>
     *
     * <code>repeated .DrmCertificate.ServiceType service_types = 8;</code>
     * @return A list containing the serviceTypes.
     */
    public java.util.List<de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType> getServiceTypesList() {
      return new com.google.protobuf.Internal.ListAdapter<
          java.lang.Integer, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType>(serviceTypes_, serviceTypes_converter_);
    }
    /**
     * <pre>
     * This field is used only when type = SERVICE to specify which SDK uses
     * service certificate. This repeated field is treated as a set. A certificate
     * may be used for the specified service SDK if the appropriate ServiceType
     * is specified in this field.
     * </pre>
     *
     * <code>repeated .DrmCertificate.ServiceType service_types = 8;</code>
     * @return The count of serviceTypes.
     */
    public int getServiceTypesCount() {
      return serviceTypes_.size();
    }
    /**
     * <pre>
     * This field is used only when type = SERVICE to specify which SDK uses
     * service certificate. This repeated field is treated as a set. A certificate
     * may be used for the specified service SDK if the appropriate ServiceType
     * is specified in this field.
     * </pre>
     *
     * <code>repeated .DrmCertificate.ServiceType service_types = 8;</code>
     * @param index The index of the element to return.
     * @return The serviceTypes at the given index.
     */
    public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType getServiceTypes(int index) {
      return serviceTypes_converter_.convert(serviceTypes_.get(index));
    }
    /**
     * <pre>
     * This field is used only when type = SERVICE to specify which SDK uses
     * service certificate. This repeated field is treated as a set. A certificate
     * may be used for the specified service SDK if the appropriate ServiceType
     * is specified in this field.
     * </pre>
     *
     * <code>repeated .DrmCertificate.ServiceType service_types = 8;</code>
     * @param index The index to set the value at.
     * @param value The serviceTypes to set.
     * @return This builder for chaining.
     */
    public Builder setServiceTypes(
        int index, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureServiceTypesIsMutable();
      serviceTypes_.set(index, value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This field is used only when type = SERVICE to specify which SDK uses
     * service certificate. This repeated field is treated as a set. A certificate
     * may be used for the specified service SDK if the appropriate ServiceType
     * is specified in this field.
     * </pre>
     *
     * <code>repeated .DrmCertificate.ServiceType service_types = 8;</code>
     * @param value The serviceTypes to add.
     * @return This builder for chaining.
     */
    public Builder addServiceTypes(de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureServiceTypesIsMutable();
      serviceTypes_.add(value.getNumber());
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This field is used only when type = SERVICE to specify which SDK uses
     * service certificate. This repeated field is treated as a set. A certificate
     * may be used for the specified service SDK if the appropriate ServiceType
     * is specified in this field.
     * </pre>
     *
     * <code>repeated .DrmCertificate.ServiceType service_types = 8;</code>
     * @param values The serviceTypes to add.
     * @return This builder for chaining.
     */
    public Builder addAllServiceTypes(
        java.lang.Iterable<? extends de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType> values) {
      ensureServiceTypesIsMutable();
      for (de.klassenserver7b.widevine4j.protobuf.DrmCertificate.ServiceType value : values) {
        serviceTypes_.add(value.getNumber());
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This field is used only when type = SERVICE to specify which SDK uses
     * service certificate. This repeated field is treated as a set. A certificate
     * may be used for the specified service SDK if the appropriate ServiceType
     * is specified in this field.
     * </pre>
     *
     * <code>repeated .DrmCertificate.ServiceType service_types = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearServiceTypes() {
      serviceTypes_ = java.util.Collections.emptyList();
      bitField0_ = (bitField0_ & ~0x00000100);
      onChanged();
      return this;
    }

    private int algorithm_ = 1;
    /**
     * <pre>
     * Required. The algorithm field contains the curve used to create the
     * |public_key| if algorithm is one of the ECC types.
     * The |algorithm| is used for both to determine the if the certificate is ECC
     * or RSA. The |algorithm| also specifies the parameters that were used to
     * create |public_key| and are used to create an ephemeral session key.
     * </pre>
     *
     * <code>optional .DrmCertificate.Algorithm algorithm = 9 [default = RSA];</code>
     * @return Whether the algorithm field is set.
     */
    @java.lang.Override public boolean hasAlgorithm() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * Required. The algorithm field contains the curve used to create the
     * |public_key| if algorithm is one of the ECC types.
     * The |algorithm| is used for both to determine the if the certificate is ECC
     * or RSA. The |algorithm| also specifies the parameters that were used to
     * create |public_key| and are used to create an ephemeral session key.
     * </pre>
     *
     * <code>optional .DrmCertificate.Algorithm algorithm = 9 [default = RSA];</code>
     * @return The algorithm.
     */
    @java.lang.Override
    public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm getAlgorithm() {
      de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm result = de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm.forNumber(algorithm_);
      return result == null ? de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm.RSA : result;
    }
    /**
     * <pre>
     * Required. The algorithm field contains the curve used to create the
     * |public_key| if algorithm is one of the ECC types.
     * The |algorithm| is used for both to determine the if the certificate is ECC
     * or RSA. The |algorithm| also specifies the parameters that were used to
     * create |public_key| and are used to create an ephemeral session key.
     * </pre>
     *
     * <code>optional .DrmCertificate.Algorithm algorithm = 9 [default = RSA];</code>
     * @param value The algorithm to set.
     * @return This builder for chaining.
     */
    public Builder setAlgorithm(de.klassenserver7b.widevine4j.protobuf.DrmCertificate.Algorithm value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000200;
      algorithm_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Required. The algorithm field contains the curve used to create the
     * |public_key| if algorithm is one of the ECC types.
     * The |algorithm| is used for both to determine the if the certificate is ECC
     * or RSA. The |algorithm| also specifies the parameters that were used to
     * create |public_key| and are used to create an ephemeral session key.
     * </pre>
     *
     * <code>optional .DrmCertificate.Algorithm algorithm = 9 [default = RSA];</code>
     * @return This builder for chaining.
     */
    public Builder clearAlgorithm() {
      bitField0_ = (bitField0_ & ~0x00000200);
      algorithm_ = 1;
      onChanged();
      return this;
    }

    private com.google.protobuf.ByteString rotId_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Optional. May be present in DEVICE certificate types. This is the root
     * of trust identifier that holds an encrypted value that identifies the
     * keybox or other root of trust that was used to provision a DEVICE drm
     * certificate.
     * </pre>
     *
     * <code>optional bytes rot_id = 10;</code>
     * @return Whether the rotId field is set.
     */
    @java.lang.Override
    public boolean hasRotId() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * Optional. May be present in DEVICE certificate types. This is the root
     * of trust identifier that holds an encrypted value that identifies the
     * keybox or other root of trust that was used to provision a DEVICE drm
     * certificate.
     * </pre>
     *
     * <code>optional bytes rot_id = 10;</code>
     * @return The rotId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getRotId() {
      return rotId_;
    }
    /**
     * <pre>
     * Optional. May be present in DEVICE certificate types. This is the root
     * of trust identifier that holds an encrypted value that identifies the
     * keybox or other root of trust that was used to provision a DEVICE drm
     * certificate.
     * </pre>
     *
     * <code>optional bytes rot_id = 10;</code>
     * @param value The rotId to set.
     * @return This builder for chaining.
     */
    public Builder setRotId(com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      rotId_ = value;
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. May be present in DEVICE certificate types. This is the root
     * of trust identifier that holds an encrypted value that identifies the
     * keybox or other root of trust that was used to provision a DEVICE drm
     * certificate.
     * </pre>
     *
     * <code>optional bytes rot_id = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearRotId() {
      bitField0_ = (bitField0_ & ~0x00000400);
      rotId_ = getDefaultInstance().getRotId();
      onChanged();
      return this;
    }

    private de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey encryptionKey_;
    private com.google.protobuf.SingleFieldBuilderV3<
        de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.Builder, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKeyOrBuilder> encryptionKeyBuilder_;
    /**
     * <pre>
     * Optional. May be present in devices that explicitly support dual keys. When
     * present the |public_key| is used for verification of received license
     * request messages.
     * </pre>
     *
     * <code>optional .DrmCertificate.EncryptionKey encryption_key = 11;</code>
     * @return Whether the encryptionKey field is set.
     */
    public boolean hasEncryptionKey() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * Optional. May be present in devices that explicitly support dual keys. When
     * present the |public_key| is used for verification of received license
     * request messages.
     * </pre>
     *
     * <code>optional .DrmCertificate.EncryptionKey encryption_key = 11;</code>
     * @return The encryptionKey.
     */
    public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey getEncryptionKey() {
      if (encryptionKeyBuilder_ == null) {
        return encryptionKey_ == null ? de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.getDefaultInstance() : encryptionKey_;
      } else {
        return encryptionKeyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Optional. May be present in devices that explicitly support dual keys. When
     * present the |public_key| is used for verification of received license
     * request messages.
     * </pre>
     *
     * <code>optional .DrmCertificate.EncryptionKey encryption_key = 11;</code>
     */
    public Builder setEncryptionKey(de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey value) {
      if (encryptionKeyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        encryptionKey_ = value;
      } else {
        encryptionKeyBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. May be present in devices that explicitly support dual keys. When
     * present the |public_key| is used for verification of received license
     * request messages.
     * </pre>
     *
     * <code>optional .DrmCertificate.EncryptionKey encryption_key = 11;</code>
     */
    public Builder setEncryptionKey(
        de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.Builder builderForValue) {
      if (encryptionKeyBuilder_ == null) {
        encryptionKey_ = builderForValue.build();
      } else {
        encryptionKeyBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. May be present in devices that explicitly support dual keys. When
     * present the |public_key| is used for verification of received license
     * request messages.
     * </pre>
     *
     * <code>optional .DrmCertificate.EncryptionKey encryption_key = 11;</code>
     */
    public Builder mergeEncryptionKey(de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey value) {
      if (encryptionKeyBuilder_ == null) {
        if (((bitField0_ & 0x00000800) != 0) &&
          encryptionKey_ != null &&
          encryptionKey_ != de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.getDefaultInstance()) {
          getEncryptionKeyBuilder().mergeFrom(value);
        } else {
          encryptionKey_ = value;
        }
      } else {
        encryptionKeyBuilder_.mergeFrom(value);
      }
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. May be present in devices that explicitly support dual keys. When
     * present the |public_key| is used for verification of received license
     * request messages.
     * </pre>
     *
     * <code>optional .DrmCertificate.EncryptionKey encryption_key = 11;</code>
     */
    public Builder clearEncryptionKey() {
      bitField0_ = (bitField0_ & ~0x00000800);
      encryptionKey_ = null;
      if (encryptionKeyBuilder_ != null) {
        encryptionKeyBuilder_.dispose();
        encryptionKeyBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Optional. May be present in devices that explicitly support dual keys. When
     * present the |public_key| is used for verification of received license
     * request messages.
     * </pre>
     *
     * <code>optional .DrmCertificate.EncryptionKey encryption_key = 11;</code>
     */
    public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.Builder getEncryptionKeyBuilder() {
      bitField0_ |= 0x00000800;
      onChanged();
      return getEncryptionKeyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Optional. May be present in devices that explicitly support dual keys. When
     * present the |public_key| is used for verification of received license
     * request messages.
     * </pre>
     *
     * <code>optional .DrmCertificate.EncryptionKey encryption_key = 11;</code>
     */
    public de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKeyOrBuilder getEncryptionKeyOrBuilder() {
      if (encryptionKeyBuilder_ != null) {
        return encryptionKeyBuilder_.getMessageOrBuilder();
      } else {
        return encryptionKey_ == null ?
            de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.getDefaultInstance() : encryptionKey_;
      }
    }
    /**
     * <pre>
     * Optional. May be present in devices that explicitly support dual keys. When
     * present the |public_key| is used for verification of received license
     * request messages.
     * </pre>
     *
     * <code>optional .DrmCertificate.EncryptionKey encryption_key = 11;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.Builder, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKeyOrBuilder> 
        getEncryptionKeyFieldBuilder() {
      if (encryptionKeyBuilder_ == null) {
        encryptionKeyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKey.Builder, de.klassenserver7b.widevine4j.protobuf.DrmCertificate.EncryptionKeyOrBuilder>(
                getEncryptionKey(),
                getParentForChildren(),
                isClean());
        encryptionKey_ = null;
      }
      return encryptionKeyBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:DrmCertificate)
  }

  // @@protoc_insertion_point(class_scope:DrmCertificate)
  private static final de.klassenserver7b.widevine4j.protobuf.DrmCertificate DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new de.klassenserver7b.widevine4j.protobuf.DrmCertificate();
  }

  public static de.klassenserver7b.widevine4j.protobuf.DrmCertificate getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<DrmCertificate>
      PARSER = new com.google.protobuf.AbstractParser<DrmCertificate>() {
    @java.lang.Override
    public DrmCertificate parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<DrmCertificate> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<DrmCertificate> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public de.klassenserver7b.widevine4j.protobuf.DrmCertificate getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

